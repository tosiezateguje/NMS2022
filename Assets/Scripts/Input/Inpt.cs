//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Scripts/Input/Inpt.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inpt : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inpt()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inpt"",
    ""maps"": [
        {
            ""name"": ""d"",
            ""id"": ""53405542-872a-4e79-9297-47bfccd278e7"",
            ""actions"": [
                {
                    ""name"": ""mouseScroll"",
                    ""type"": ""Value"",
                    ""id"": ""732da67c-e8e6-4e10-be38-556326cd6872"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""mouseRightClick"",
                    ""type"": ""Button"",
                    ""id"": ""0ecf3ff4-8ccb-43dd-836e-a9e91904053b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""chatToggle"",
                    ""type"": ""Button"",
                    ""id"": ""1b4a1c80-6936-4a9d-aa79-7a89d91aeb66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""0f81e332-a05c-4a87-9c4b-bda64be6b696"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseScroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""10c50fc4-75d4-4f05-8cf1-ce002a255d89"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b52b7157-af3f-4c51-ab56-55752a1b82c5"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1b968e11-afe4-4fc5-b1e3-cd9afb70b6a9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseRightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc661155-d723-4273-8e5b-dba9c7ef43b3"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""chatToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7531f5d-74e6-45bc-ac9c-933fffe838b1"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""chatToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // d
        m_d = asset.FindActionMap("d", throwIfNotFound: true);
        m_d_mouseScroll = m_d.FindAction("mouseScroll", throwIfNotFound: true);
        m_d_mouseRightClick = m_d.FindAction("mouseRightClick", throwIfNotFound: true);
        m_d_chatToggle = m_d.FindAction("chatToggle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // d
    private readonly InputActionMap m_d;
    private IDActions m_DActionsCallbackInterface;
    private readonly InputAction m_d_mouseScroll;
    private readonly InputAction m_d_mouseRightClick;
    private readonly InputAction m_d_chatToggle;
    public struct DActions
    {
        private @Inpt m_Wrapper;
        public DActions(@Inpt wrapper) { m_Wrapper = wrapper; }
        public InputAction @mouseScroll => m_Wrapper.m_d_mouseScroll;
        public InputAction @mouseRightClick => m_Wrapper.m_d_mouseRightClick;
        public InputAction @chatToggle => m_Wrapper.m_d_chatToggle;
        public InputActionMap Get() { return m_Wrapper.m_d; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DActions set) { return set.Get(); }
        public void SetCallbacks(IDActions instance)
        {
            if (m_Wrapper.m_DActionsCallbackInterface != null)
            {
                @mouseScroll.started -= m_Wrapper.m_DActionsCallbackInterface.OnMouseScroll;
                @mouseScroll.performed -= m_Wrapper.m_DActionsCallbackInterface.OnMouseScroll;
                @mouseScroll.canceled -= m_Wrapper.m_DActionsCallbackInterface.OnMouseScroll;
                @mouseRightClick.started -= m_Wrapper.m_DActionsCallbackInterface.OnMouseRightClick;
                @mouseRightClick.performed -= m_Wrapper.m_DActionsCallbackInterface.OnMouseRightClick;
                @mouseRightClick.canceled -= m_Wrapper.m_DActionsCallbackInterface.OnMouseRightClick;
                @chatToggle.started -= m_Wrapper.m_DActionsCallbackInterface.OnChatToggle;
                @chatToggle.performed -= m_Wrapper.m_DActionsCallbackInterface.OnChatToggle;
                @chatToggle.canceled -= m_Wrapper.m_DActionsCallbackInterface.OnChatToggle;
            }
            m_Wrapper.m_DActionsCallbackInterface = instance;
            if (instance != null)
            {
                @mouseScroll.started += instance.OnMouseScroll;
                @mouseScroll.performed += instance.OnMouseScroll;
                @mouseScroll.canceled += instance.OnMouseScroll;
                @mouseRightClick.started += instance.OnMouseRightClick;
                @mouseRightClick.performed += instance.OnMouseRightClick;
                @mouseRightClick.canceled += instance.OnMouseRightClick;
                @chatToggle.started += instance.OnChatToggle;
                @chatToggle.performed += instance.OnChatToggle;
                @chatToggle.canceled += instance.OnChatToggle;
            }
        }
    }
    public DActions @d => new DActions(this);
    public interface IDActions
    {
        void OnMouseScroll(InputAction.CallbackContext context);
        void OnMouseRightClick(InputAction.CallbackContext context);
        void OnChatToggle(InputAction.CallbackContext context);
    }
}
